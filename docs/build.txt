
Before first build update git submodules with:
git submodule update --init --recursive

or clone whole repo with --recursive option:

git clone --recursive https://github.com/Kicer86/photobroom.git


Required tools and libraries:
 - cmake - version 3.18 or later
 - python**
 - Qt6 - version 6.2 or higher*
 - exiv2*
 - dlib*
 - magic_enum*
 - opencv*
 - libwebp*
 - cs-libguarded*

 Optional libraries:
 - KCrash + drkonqi (for crash catching)

 Packages, libraries and other components kept as git submodules:
 - https://github.com/Kicer86/cmake_modules.git                 - various cmake modules and package finders
 - https://github.com/ageitgey/face_recognition_models.git      - modules for face recognition
 - https://github.com/Kicer86/github_api.git                    - github api
 - https://github.com/rshest/qml-colorpicker.git                - QML colorpicker item
 - https://github.com/microsoft/vcpkg.git

* For convenience it is possible to use vcpkg tool
  for download, build and install all marked libraries.

** Only on Windows.
Make sure PIL and cairosvg are installed.
For cairosvg to work, it may be required to install pipwin and then to install cairocffi with:
  pipwin install cairocffi

See here for details: https://stackoverflow.com/questions/46265677/get-cairosvg-working-in-windows


Build tips:
You may want to use predefined CMakePresets (automatically used by VisualStudio) which will read
vcpkg.json file and install all dependencies.
so vcpgk can see cs-libguarded dependency.
Please mind that dlib will be built without GPU support. Read more about it below).

Dependencies can be also install by hand:
vcpkg install dlib[core,cuda,fftw3] exiv2 magic-enum qtbase qtsvg qttools qtdeclarative qtmultimedia opencv4[core,contrib] libwebp libguarded

You may wish to include --triplet=x64-windows option to build x64 binaries on Windows system.

If you do not want vcpkg to download and build Qt6 (for any reason) do not include Qt packages,
or use ports overlay option by providing --overlay-ports=<repo path>/.github/vcpkg_overlays/qt/ parameter to vcpkg call
which will make vcpkg to use system Qt packages (https://devblogs.microsoft.com/cppblog/using-system-package-manager-dependencies-with-vcpkg).
In either way remeber to provide path to your Qt installation during cmake invocation for example with:
cmake -DCMAKE_PREFIX_PATH=C:/Qt/6.2/msvc2019_64 path/to/sources
or use any other way to make it visible to CMake.

If your system does not have NVidia GPU (or you do not want to use gpu acceleration for photo analysis),
use dlib[core,fftw3] instead of dlib[core,cuda,fftw3] in vcpkg call.
Please mind that face recognition without gpu support is slower.

If you want to build unit tests include 'gtest' package.


Tested compilers (with c++23 support):
1. gcc (Linux)
2. Visual Studio 2022 (Windows)
3. clang version 16 (Linux)


PhotoBroom cannot be run without installation step.
Build 'install' target to install PhotoBroom.
On Windows photo broom can be launched from installation dir only.
On Linux, thanks to RPATH, it can be launched from build dir.

Extra target available for Windows:
'package' target will create a package (Installator) with all files required for running
          PhotoBroom on other Windows machines.
